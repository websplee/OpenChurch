// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OC.Data;

#nullable disable

namespace OC.Data.Migrations
{
    [DbContext(typeof(OCDbContext))]
    partial class OCDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("tblRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bdf53b89-5034-4dfa-8d2b-7441ce66a535",
                            ConcurrencyStamp = "d48f050c-1abf-4aca-8f0e-2640d2995ba9",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f077ed29-51b7-4fe7-8136-c65b8e7b3f15",
                            ConcurrencyStamp = "9be39d60-d07c-48ca-8710-084d8a761ce4",
                            Name = "BranchUser",
                            NormalizedName = "BRANCHUSER"
                        },
                        new
                        {
                            Id = "a173a5cc-3edc-4f49-979c-f423e044b202",
                            ConcurrencyStamp = "379836c8-c106-4541-809f-71b57aa535e3",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = "f0223225-0c52-413d-b188-0868ea111427",
                            ConcurrencyStamp = "932b56ec-5984-442a-8a27-f6a51aa1baf1",
                            Name = "Visitor",
                            NormalizedName = "VISITOR"
                        },
                        new
                        {
                            Id = "575759c6-e020-4c4b-888d-24e01ba62797",
                            ConcurrencyStamp = "8555cc39-f634-4a94-a1a7-85d73c8d588f",
                            Name = "Pastor",
                            NormalizedName = "PASTOR"
                        },
                        new
                        {
                            Id = "0a8baeb0-7191-4731-b8f2-a8b22b5a8596",
                            ConcurrencyStamp = "3caa0a31-59a5-4da7-aae7-b0ce9dfc1260",
                            Name = "CellGroupLeader",
                            NormalizedName = "CELLGROUPLEADER"
                        },
                        new
                        {
                            Id = "a1922985-be01-4762-a2b6-32d6f4f58235",
                            ConcurrencyStamp = "082e10a4-cd9a-4be4-bfe4-043eda4e0535",
                            Name = "MinistryLeader",
                            NormalizedName = "MINISTRYLEADER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("tblUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            RoleId = "bdf53b89-5034-4dfa-8d2b-7441ce66a535"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Accounting.Expense", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ChurchProgramSessionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ExpenseTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TrxDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ChurchProgramSessionId");

                    b.HasIndex("ExpenseTypeId");

                    b.HasIndex("MemberId");

                    b.ToTable("tblExpenses", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Accounting.ExpenseType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tblExpenseTpes", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Accounting.Income", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ChurchProgramSessionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("IncomeTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TrxDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrxSource")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ChurchProgramSessionId");

                    b.HasIndex("IncomeTypeId");

                    b.HasIndex("MemberId");

                    b.ToTable("tblIncomes", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Accounting.IncomeType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tblIncomeTypes", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Accounting.Pledge", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ChurchProgramSessionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MinistryId")
                        .HasColumnType("bigint");

                    b.Property<double>("PaidAmount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RecurringReminderDay")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChurchProgramSessionId");

                    b.HasIndex("MemberId");

                    b.HasIndex("MinistryId");

                    b.ToTable("tblPledges", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Audits.Audit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tblAudits", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.Branch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OwnBuilding")
                        .HasColumnType("bit");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("tblBranches", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(820),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Email = "chawamabranch@blci.com",
                            IsActive = true,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Chawama",
                            OwnBuilding = false,
                            Phone1 = "",
                            Phone2 = "",
                            PhysicalAddress = "Plot 10, Chawama Road",
                            RegionId = 6L,
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(812)
                        },
                        new
                        {
                            Id = 2L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(831),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Email = "chilangabranch@blci.com",
                            IsActive = true,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Chilanga",
                            OwnBuilding = false,
                            Phone1 = "",
                            Phone2 = "",
                            PhysicalAddress = "Plot 3, Munda Wanga",
                            RegionId = 6L,
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(830)
                        },
                        new
                        {
                            Id = 3L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(837),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Email = "chongwebranch@blci.com",
                            IsActive = true,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Chongwe",
                            OwnBuilding = false,
                            Phone1 = "",
                            Phone2 = "",
                            PhysicalAddress = "Corner Great East Road",
                            RegionId = 6L,
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(836)
                        },
                        new
                        {
                            Id = 4L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(842),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Email = "chisambabranch@blci.com",
                            IsActive = true,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Chisamba Boma",
                            OwnBuilding = false,
                            Phone1 = "",
                            Phone2 = "",
                            PhysicalAddress = "Town Centre",
                            RegionId = 6L,
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(841)
                        },
                        new
                        {
                            Id = 5L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(855),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Email = "chisambabranch@blci.com",
                            IsActive = true,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Chisamba William",
                            OwnBuilding = false,
                            Phone1 = "",
                            Phone2 = "",
                            PhysicalAddress = "William Farm",
                            RegionId = 6L,
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(852)
                        });
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.BranchLeadership", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("LeadershipRoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("LeadershipRoleId");

                    b.HasIndex("MemberId");

                    b.ToTable("tblBranchLeaderships", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.BranchMinistry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MinistryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("MinistryId");

                    b.ToTable("tblBranchMinistries", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.BranchMinistryLeadership", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("BranchMinistryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("LeadershipRoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchMinistryId");

                    b.HasIndex("LeadershipRoleId");

                    b.HasIndex("MemberId");

                    b.ToTable("tblBranchMinistryLeaderships", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.BranchStaff", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("tblBranchStaff", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.BranchStaffResignation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("BranchStaffId")
                        .HasColumnType("bigint");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ResignationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tblBranchStaffResignations", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.CellGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeetingDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeetingTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("tblCellGroups", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.CellGroupHost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CellGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CellGroupId");

                    b.HasIndex("MemberId");

                    b.ToTable("tblCellGroupHosts", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.CellLeadership", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CellGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("LeadershipRoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CellGroupId");

                    b.HasIndex("LeadershipRoleId");

                    b.HasIndex("MemberId");

                    b.ToTable("tblCellLeaderships", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.ChurchProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tblChurchPrograms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(2915),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Description = "Sunday First Service",
                            IsActive = true,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Sunday First Service",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(2911)
                        },
                        new
                        {
                            Id = 2L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(2920),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Description = "Sunday Second Service",
                            IsActive = true,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Sunday Second Service",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(2919)
                        },
                        new
                        {
                            Id = 3L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(2924),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Description = "Sunday Youth Service",
                            IsActive = true,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Sunday Youth Service",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(2923)
                        },
                        new
                        {
                            Id = 4L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(2927),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Description = "Sunday Local Language Service",
                            IsActive = true,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Sunday Local Language Service",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(2926)
                        },
                        new
                        {
                            Id = 5L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(2930),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Description = "Mid-week Service",
                            IsActive = true,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Mid-week Service",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(2929)
                        },
                        new
                        {
                            Id = 6L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(2933),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Description = "3 Days of Power conference",
                            IsActive = true,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "3 Days of Power",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(2932)
                        },
                        new
                        {
                            Id = 7L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(2936),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Description = "Easter Conference",
                            IsActive = true,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Easter Conference",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(2935)
                        });
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.ChurchProgramSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ChurchProgramId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ChurchProgramId");

                    b.ToTable("tblChurchProgramSessions", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.ChurchProgramSessionAttendance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ChurchProgramSessionId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TotalBoys")
                        .HasColumnType("int");

                    b.Property<int?>("TotalGirls")
                        .HasColumnType("int");

                    b.Property<int?>("TotalMen")
                        .HasColumnType("int");

                    b.Property<int?>("TotalWomen")
                        .HasColumnType("int");

                    b.Property<int?>("TotalYouthMen")
                        .HasColumnType("int");

                    b.Property<int?>("TotalYouthWomen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChurchProgramSessionId");

                    b.ToTable("tblChurchProgramSessionAttendances", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.ChurchProgramSessionVisitor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ChurchProgramSessionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateToVisit")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateVisited")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("FollowedUp")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChurchProgramSessionId");

                    b.ToTable("tblChurchProgramSessionVistors", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.IncomingTransfer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldBranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("MemberId");

                    b.ToTable("tblIncomingTransfers", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.Ministry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tblMinistries", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.OutgoingTransfer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldBranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("MemberId");

                    b.ToTable("tblOutgoingTransfers", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Locations.ChurchSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FounderDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FoundingDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("tblChurchSettings", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Locations.Continent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tblContinents", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4162),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Africa",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4161)
                        },
                        new
                        {
                            Id = 2L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4171),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Australia",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4170)
                        },
                        new
                        {
                            Id = 3L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4174),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "North America",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4173)
                        },
                        new
                        {
                            Id = 4L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4344),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "South America",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4343)
                        },
                        new
                        {
                            Id = 5L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4347),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Europe",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4346)
                        },
                        new
                        {
                            Id = 6L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4349),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Asia",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4348)
                        });
                });

            modelBuilder.Entity("OC.Domain.Models.Locations.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ContinentId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContinentId");

                    b.ToTable("tblCountries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4615),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Code = "zm",
                            ContinentId = 1L,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Zambia",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4614)
                        },
                        new
                        {
                            Id = 2L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4619),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Code = "cd",
                            ContinentId = 1L,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Democratic Republic of Congo",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4619)
                        },
                        new
                        {
                            Id = 3L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4623),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Code = "na",
                            ContinentId = 1L,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Namibia",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4622)
                        },
                        new
                        {
                            Id = 4L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4626),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Code = "za",
                            ContinentId = 1L,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "South Africa",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4625)
                        },
                        new
                        {
                            Id = 5L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4629),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Code = "mw",
                            ContinentId = 1L,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Malawi",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4628)
                        },
                        new
                        {
                            Id = 6L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4632),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Code = "tz",
                            ContinentId = 1L,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Tanzania",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4631)
                        },
                        new
                        {
                            Id = 7L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4635),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Code = "bw",
                            ContinentId = 1L,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Botswana",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4634)
                        },
                        new
                        {
                            Id = 8L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4637),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Code = "us",
                            ContinentId = 3L,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "United States",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4637)
                        },
                        new
                        {
                            Id = 9L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4640),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Code = "au",
                            ContinentId = 2L,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Australia",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4639)
                        },
                        new
                        {
                            Id = 10L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4643),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Code = "gb",
                            ContinentId = 5L,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "United Kingdom",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4642)
                        });
                });

            modelBuilder.Entity("OC.Domain.Models.Locations.Region", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("tblRegions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4807),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            CountryId = 1L,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "North-Western",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4806)
                        },
                        new
                        {
                            Id = 2L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4812),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            CountryId = 1L,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Northern",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4811)
                        },
                        new
                        {
                            Id = 3L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4821),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            CountryId = 1L,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Muchinga",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4820)
                        },
                        new
                        {
                            Id = 4L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4825),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            CountryId = 1L,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Luapula",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4824)
                        },
                        new
                        {
                            Id = 5L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4828),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            CountryId = 1L,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Eastern",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4827)
                        },
                        new
                        {
                            Id = 6L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4831),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            CountryId = 1L,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Lusaka",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4830)
                        },
                        new
                        {
                            Id = 7L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4834),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            CountryId = 1L,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Central",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4833)
                        },
                        new
                        {
                            Id = 8L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4837),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            CountryId = 1L,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Copperbelt-South",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4836)
                        },
                        new
                        {
                            Id = 9L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4840),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            CountryId = 1L,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Copperbelt-North",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4839)
                        },
                        new
                        {
                            Id = 10L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4842),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            CountryId = 1L,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Southern",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4842)
                        },
                        new
                        {
                            Id = 11L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4845),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            CountryId = 1L,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Western",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(4844)
                        });
                });

            modelBuilder.Entity("OC.Domain.Models.Locations.RegionLeadership", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("LeadershipRoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LeadershipRoleId");

                    b.HasIndex("MemberId");

                    b.HasIndex("RegionId");

                    b.ToTable("tblRegionLeaderships", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Members.EducationField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tblEducationFields", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Members.EducationLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tblEducationLevels", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(5284),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "None",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(5283)
                        },
                        new
                        {
                            Id = 2L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(5288),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Doctorate (PhD)",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(5287)
                        },
                        new
                        {
                            Id = 3L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(5290),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Masters",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(5290)
                        },
                        new
                        {
                            Id = 4L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(5293),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Degree",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(5292)
                        },
                        new
                        {
                            Id = 5L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(5295),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Diploma",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(5295)
                        },
                        new
                        {
                            Id = 6L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(5298),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Certificate",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(5297)
                        },
                        new
                        {
                            Id = 7L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(5300),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Secondary Ed.",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(5299)
                        },
                        new
                        {
                            Id = 8L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(5303),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Primary Ed.",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 661, DateTimeKind.Utc).AddTicks(5302)
                        });
                });

            modelBuilder.Entity("OC.Domain.Models.Members.Family", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FamilyAdminId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FamilyAdminId")
                        .IsUnique();

                    b.ToTable("tblFamilies", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Members.LeadershipRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tblLeadershipRoles", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Members.Member", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CellGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateBaptised")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateBornAgain")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<long>("EducationLevelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FamilyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SpouseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CellGroupId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("SpouseId");

                    b.HasIndex("UserId");

                    b.ToTable("tblMembers", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Members.MemberEducation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tblMemberEducations", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Members.MemberTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("Narration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TransactionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("TransactionTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("tblMemberTransactions", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Members.TransactionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tblTransactionTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 664, DateTimeKind.Utc).AddTicks(5916),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Cash",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 664, DateTimeKind.Utc).AddTicks(5911)
                        },
                        new
                        {
                            Id = 2L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 664, DateTimeKind.Utc).AddTicks(5923),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Mobile Money",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 664, DateTimeKind.Utc).AddTicks(5922)
                        },
                        new
                        {
                            Id = 3L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 664, DateTimeKind.Utc).AddTicks(5926),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Card",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 664, DateTimeKind.Utc).AddTicks(5925)
                        });
                });

            modelBuilder.Entity("OC.Domain.Models.Users.Module", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("tblModules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 664, DateTimeKind.Utc).AddTicks(6058),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Description = "Master access to all modules",
                            IsActive = true,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Admin",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 664, DateTimeKind.Utc).AddTicks(6056)
                        },
                        new
                        {
                            Id = 2L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 664, DateTimeKind.Utc).AddTicks(6064),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Description = "Users Management System Module",
                            IsActive = true,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Users",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 664, DateTimeKind.Utc).AddTicks(6064)
                        },
                        new
                        {
                            Id = 3L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 664, DateTimeKind.Utc).AddTicks(6068),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Description = "Accounting System Module",
                            IsActive = true,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Accounting",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 664, DateTimeKind.Utc).AddTicks(6067)
                        },
                        new
                        {
                            Id = 4L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 664, DateTimeKind.Utc).AddTicks(6071),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Description = "Reporting System Module",
                            IsActive = true,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Reports",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 664, DateTimeKind.Utc).AddTicks(6071)
                        },
                        new
                        {
                            Id = 5L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 664, DateTimeKind.Utc).AddTicks(6075),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Description = "Branches System Module",
                            IsActive = true,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Branches",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 664, DateTimeKind.Utc).AddTicks(6074)
                        },
                        new
                        {
                            Id = 6L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 664, DateTimeKind.Utc).AddTicks(6078),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Description = "Locations System Module",
                            IsActive = true,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Locations",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 664, DateTimeKind.Utc).AddTicks(6077)
                        },
                        new
                        {
                            Id = 7L,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 664, DateTimeKind.Utc).AddTicks(6081),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Description = "Members System Module",
                            IsActive = true,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            Name = "Members",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 664, DateTimeKind.Utc).AddTicks(6080)
                        });
                });

            modelBuilder.Entity("OC.Domain.Models.Users.RoleModule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CanAddEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("CanApprove")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDownload")
                        .HasColumnType("bit");

                    b.Property<bool>("CanExport")
                        .HasColumnType("bit");

                    b.Property<bool>("CanUpload")
                        .HasColumnType("bit");

                    b.Property<bool>("CanView")
                        .HasColumnType("bit");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ModuleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("ModuleId", "RoleId")
                        .IsUnique();

                    b.ToTable("tblRoleModules", (string)null);
                });

            modelBuilder.Entity("OC.Domain.Models.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFirstLogin")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("tblUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            AccessFailedCount = 0,
                            ApprovalDate = new DateTime(2025, 7, 30, 20, 9, 6, 664, DateTimeKind.Utc).AddTicks(7035),
                            CheckerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            ConcurrencyStamp = "f9c13b05-4747-43e9-9b3c-926be15e28f0",
                            Description = "Systems Administrator",
                            Email = "superadmin@blci.com",
                            EmailConfirmed = true,
                            Fullname = "Super Admin",
                            IsActive = true,
                            IsFirstLogin = false,
                            LockoutEnabled = false,
                            MakerId = "8a4353dd-5496-4ffe-bfa3-db90afab6684",
                            NormalizedEmail = "SUPERADMIN@BLCI.COM",
                            NormalizedUserName = "SUPERADMIN@BLCI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGtNFTCG2PexQQMdAoqj3QvSW14QE76fq0zcNvb57x/o1gkvCdBsQhqzgJTavUaDzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "965166fb-61cb-4d12-9f93-5043a43d38f9",
                            SubmissionDate = new DateTime(2025, 7, 30, 20, 9, 6, 664, DateTimeKind.Utc).AddTicks(7034),
                            TwoFactorEnabled = false,
                            UserName = "superadmin@blci.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OC.Domain.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OC.Domain.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OC.Domain.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OC.Domain.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OC.Domain.Models.Accounting.Expense", b =>
                {
                    b.HasOne("OC.Domain.Models.Branches.Branch", "Branch")
                        .WithMany("Expenses")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OC.Domain.Models.Branches.ChurchProgramSession", "ChurchProgramSession")
                        .WithMany("Expenses")
                        .HasForeignKey("ChurchProgramSessionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OC.Domain.Models.Accounting.ExpenseType", "ExpenseType")
                        .WithMany()
                        .HasForeignKey("ExpenseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OC.Domain.Models.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Branch");

                    b.Navigation("ChurchProgramSession");

                    b.Navigation("ExpenseType");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("OC.Domain.Models.Accounting.Income", b =>
                {
                    b.HasOne("OC.Domain.Models.Branches.Branch", "Branch")
                        .WithMany("Incomes")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OC.Domain.Models.Branches.ChurchProgramSession", "ChurchProgramSession")
                        .WithMany("Incomes")
                        .HasForeignKey("ChurchProgramSessionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OC.Domain.Models.Accounting.IncomeType", "IncomeType")
                        .WithMany()
                        .HasForeignKey("IncomeTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OC.Domain.Models.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Branch");

                    b.Navigation("ChurchProgramSession");

                    b.Navigation("IncomeType");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("OC.Domain.Models.Accounting.Pledge", b =>
                {
                    b.HasOne("OC.Domain.Models.Branches.ChurchProgramSession", "ChurchProgramSession")
                        .WithMany("Pledges")
                        .HasForeignKey("ChurchProgramSessionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OC.Domain.Models.Members.Member", "Member")
                        .WithMany("Pledges")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OC.Domain.Models.Branches.Ministry", "Ministry")
                        .WithMany("Pledges")
                        .HasForeignKey("MinistryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChurchProgramSession");

                    b.Navigation("Member");

                    b.Navigation("Ministry");
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.Branch", b =>
                {
                    b.HasOne("OC.Domain.Models.Locations.Region", "Region")
                        .WithMany("Branches")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.BranchLeadership", b =>
                {
                    b.HasOne("OC.Domain.Models.Branches.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OC.Domain.Models.Members.LeadershipRole", "LeadershipRole")
                        .WithMany()
                        .HasForeignKey("LeadershipRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OC.Domain.Models.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("LeadershipRole");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.BranchMinistry", b =>
                {
                    b.HasOne("OC.Domain.Models.Branches.Branch", "Branch")
                        .WithMany("BranchMinistries")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OC.Domain.Models.Branches.Ministry", "Ministry")
                        .WithMany("BranchMinistries")
                        .HasForeignKey("MinistryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Ministry");
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.BranchMinistryLeadership", b =>
                {
                    b.HasOne("OC.Domain.Models.Branches.BranchMinistry", "BranchMinistry")
                        .WithMany("BranchMinistryLeaderships")
                        .HasForeignKey("BranchMinistryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OC.Domain.Models.Members.LeadershipRole", "LeadershipRole")
                        .WithMany("BranchMinistryLeaderships")
                        .HasForeignKey("LeadershipRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OC.Domain.Models.Members.Member", "Member")
                        .WithMany("BranchMinistryLeaderships")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BranchMinistry");

                    b.Navigation("LeadershipRole");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.BranchStaff", b =>
                {
                    b.HasOne("OC.Domain.Models.Branches.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.CellGroup", b =>
                {
                    b.HasOne("OC.Domain.Models.Branches.Branch", "Branch")
                        .WithMany("CellGroups")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.CellGroupHost", b =>
                {
                    b.HasOne("OC.Domain.Models.Branches.CellGroup", "CellGroup")
                        .WithMany()
                        .HasForeignKey("CellGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OC.Domain.Models.Members.Member", "Host")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CellGroup");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.CellLeadership", b =>
                {
                    b.HasOne("OC.Domain.Models.Branches.CellGroup", "CellGroup")
                        .WithMany("CellLeaderships")
                        .HasForeignKey("CellGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OC.Domain.Models.Members.LeadershipRole", "LeadershipRole")
                        .WithMany("CellLeaderships")
                        .HasForeignKey("LeadershipRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OC.Domain.Models.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CellGroup");

                    b.Navigation("LeadershipRole");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.ChurchProgramSession", b =>
                {
                    b.HasOne("OC.Domain.Models.Branches.Branch", "Branch")
                        .WithMany("ChurchProgramSessions")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OC.Domain.Models.Branches.ChurchProgram", "ChurchProgram")
                        .WithMany("ChurchProgramSessions")
                        .HasForeignKey("ChurchProgramId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Branch");

                    b.Navigation("ChurchProgram");
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.ChurchProgramSessionAttendance", b =>
                {
                    b.HasOne("OC.Domain.Models.Branches.ChurchProgramSession", "ChurchProgramSession")
                        .WithMany("ChurchProgramSessionAttendances")
                        .HasForeignKey("ChurchProgramSessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChurchProgramSession");
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.ChurchProgramSessionVisitor", b =>
                {
                    b.HasOne("OC.Domain.Models.Branches.ChurchProgramSession", "ChurchProgramSession")
                        .WithMany("ChurchProgramSessionVisitors")
                        .HasForeignKey("ChurchProgramSessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChurchProgramSession");
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.IncomingTransfer", b =>
                {
                    b.HasOne("OC.Domain.Models.Branches.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OC.Domain.Models.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.OutgoingTransfer", b =>
                {
                    b.HasOne("OC.Domain.Models.Branches.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OC.Domain.Models.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("OC.Domain.Models.Locations.ChurchSettings", b =>
                {
                    b.HasOne("OC.Domain.Models.Branches.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("OC.Domain.Models.Locations.Country", b =>
                {
                    b.HasOne("OC.Domain.Models.Locations.Continent", "Continent")
                        .WithMany("Countries")
                        .HasForeignKey("ContinentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Continent");
                });

            modelBuilder.Entity("OC.Domain.Models.Locations.Region", b =>
                {
                    b.HasOne("OC.Domain.Models.Locations.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("OC.Domain.Models.Locations.RegionLeadership", b =>
                {
                    b.HasOne("OC.Domain.Models.Members.LeadershipRole", "LeadershipRole")
                        .WithMany("RegionLeaderships")
                        .HasForeignKey("LeadershipRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OC.Domain.Models.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OC.Domain.Models.Locations.Region", "Region")
                        .WithMany("RegionLeaderships")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LeadershipRole");

                    b.Navigation("Member");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("OC.Domain.Models.Members.Family", b =>
                {
                    b.HasOne("OC.Domain.Models.Members.Member", "Administrator")
                        .WithOne()
                        .HasForeignKey("OC.Domain.Models.Members.Family", "FamilyAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administrator");
                });

            modelBuilder.Entity("OC.Domain.Models.Members.Member", b =>
                {
                    b.HasOne("OC.Domain.Models.Branches.Branch", "Branch")
                        .WithMany("Members")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OC.Domain.Models.Branches.CellGroup", "CellGroup")
                        .WithMany("Members")
                        .HasForeignKey("CellGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OC.Domain.Models.Members.Family", "Family")
                        .WithMany("Members")
                        .HasForeignKey("FamilyId");

                    b.HasOne("OC.Domain.Models.Members.Member", "Spouse")
                        .WithMany()
                        .HasForeignKey("SpouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OC.Domain.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Branch");

                    b.Navigation("CellGroup");

                    b.Navigation("Family");

                    b.Navigation("Spouse");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OC.Domain.Models.Members.MemberTransaction", b =>
                {
                    b.HasOne("OC.Domain.Models.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OC.Domain.Models.Members.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("OC.Domain.Models.Users.RoleModule", b =>
                {
                    b.HasOne("OC.Domain.Models.Users.Module", "Module")
                        .WithMany("RoleModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.Branch", b =>
                {
                    b.Navigation("BranchMinistries");

                    b.Navigation("CellGroups");

                    b.Navigation("ChurchProgramSessions");

                    b.Navigation("Expenses");

                    b.Navigation("Incomes");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.BranchMinistry", b =>
                {
                    b.Navigation("BranchMinistryLeaderships");
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.CellGroup", b =>
                {
                    b.Navigation("CellLeaderships");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.ChurchProgram", b =>
                {
                    b.Navigation("ChurchProgramSessions");
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.ChurchProgramSession", b =>
                {
                    b.Navigation("ChurchProgramSessionAttendances");

                    b.Navigation("ChurchProgramSessionVisitors");

                    b.Navigation("Expenses");

                    b.Navigation("Incomes");

                    b.Navigation("Pledges");
                });

            modelBuilder.Entity("OC.Domain.Models.Branches.Ministry", b =>
                {
                    b.Navigation("BranchMinistries");

                    b.Navigation("Pledges");
                });

            modelBuilder.Entity("OC.Domain.Models.Locations.Continent", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("OC.Domain.Models.Locations.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("OC.Domain.Models.Locations.Region", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("RegionLeaderships");
                });

            modelBuilder.Entity("OC.Domain.Models.Members.Family", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("OC.Domain.Models.Members.LeadershipRole", b =>
                {
                    b.Navigation("BranchMinistryLeaderships");

                    b.Navigation("CellLeaderships");

                    b.Navigation("RegionLeaderships");
                });

            modelBuilder.Entity("OC.Domain.Models.Members.Member", b =>
                {
                    b.Navigation("BranchMinistryLeaderships");

                    b.Navigation("Pledges");
                });

            modelBuilder.Entity("OC.Domain.Models.Users.Module", b =>
                {
                    b.Navigation("RoleModules");
                });
#pragma warning restore 612, 618
        }
    }
}
